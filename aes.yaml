# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: edge-stack/charts/emissary-ingress/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  labels:
    product: aes
  name: ambassador
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: edge-stack-agent
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
---
# Source: edge-stack/charts/emissary-ingress/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: edge-stack
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
---
# Source: edge-stack/templates/aes-secret.yaml 
apiVersion: v1
kind: Secret
metadata:
  name: edge-stack                         # LICENSE KEY ADDED
  namespace: ambassador
type: Opaque
data:
  license-key: 'WkRneU9XWTJaV1l0TmpsaU15MDBOamRrTFdFeVkyWXRNemMxT0RneE1USXlZMlJoT2xaM1kwUm9SbFF5VEdSMFJtZHRaMGhaYTNoV1QzQTNRMXBxVjNOTlpIbEdNMU5aYVE9PQoKIA=='
---
apiVersion: v1
kind: Secret
metadata:
  name: ambassador-tls
  namespace: ambassador                    # TLS ADDED
type: kubernetes.io/tls
data:
  tls.crt: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVFVENDQXZtZ0F3SUJBZ0lVYUY2cnJFYit2Rk15Y21GMDZ1TWsyK1pNaDYwd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2daY3hDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJREFoT1JWY2dXVTlTU3pFT01Bd0dBMVVFQnd3RgpRbEpQVGxneEVEQU9CZ05WQkFvTUIxTlVWVVJGVGxReEN6QUpCZ05WQkFzTUFqRlNNU0V3SHdZRFZRUUREQmhEClNGSkpVMVJQVUVoRklFUktTVWRWU1UxTFQxVkVVa1V4SXpBaEJna3Foa2lHOXcwQkNRRVdGR05vY21semRDNXUKZVdOQVoyMWhhV3d1WTI5dE1CNFhEVEkwTURjd01URTJORGN6TTFvWERUSTFNRGN3TVRFMk5EY3pNMW93Z1pjeApDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJREFoT1JWY2dXVTlTU3pFT01Bd0dBMVVFQnd3RlFsSlBUbGd4CkVEQU9CZ05WQkFvTUIxTlVWVVJGVGxReEN6QUpCZ05WQkFzTUFqRlNNU0V3SHdZRFZRUUREQmhEU0ZKSlUxUlAKVUVoRklFUktTVWRWU1UxTFQxVkVVa1V4SXpBaEJna3Foa2lHOXcwQkNRRVdGR05vY21semRDNXVlV05BWjIxaAphV3d1WTI5dE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcmQ3cEgyRWdvWWZrCjVjNHRPc09sY0E5MytpOVE2VEwyNFEwdS9UVXR0RmNNVEFJWlVlS29HK3doU2g3bzh5Um5HbVVNVGpDaXRHNDgKODNEbjJWa1d3dEpTbzdKTWVIN3F1d3B5RjVpVGkwbUZQcGp2cExwQWhHTTRkblNMZERlREc5b0lTQTNGSzNrYgo2K29lQmFpSHNVOW5DMFNkeFdqVzNsTElROWZwVzMzYytnK29pQ09aOVV1VzNINDM5cW9nNUFmSUZKekNHRGh5Cm5jVzM1NDQwK2hibWpHTXN3azRpSDBRRDlDbmlwM21pc3FOYnIzaW1ZWCs1Sk9TanJDM2xvLytZNXRNcXhnTjMKMjFiYWZvMXlEaERBWjZpNEROTkRSWjhHUDFHTmhRVlNjWlhKemhFOE54c01yTzlncG9TY054UnRjTHhIb3VjSgpibjAxYnc0eC9RSURBUUFCbzFNd1VUQWRCZ05WSFE0RUZnUVVOWlYyMU9pbFBKQ043NVQ2S1o2bzJoUGdXRFV3Ckh3WURWUjBqQkJnd0ZvQVVOWlYyMU9pbFBKQ043NVQ2S1o2bzJoUGdXRFV3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUEvL1BWaFE4clRpUUlOZmhGL2tzNnIxZzl0am8vc1Z1TUlVWgpxeHN5elBQVlplWHl1M0YwYUhCMXF3M3JMTDhHK2gvbHBYTGpSRGM4QXFFZVFtakkyODhCOTZIMU5ER0RpM2xqCnZBK0J2OHNBMVM5RTkrWTlNTkdNTXJ1Ym1EY0l0b3NVdU13Uzl0ODlpWEpjMmVLa2FhUGRzT09GZXFKTW9qTmgKSGRuY1dUTkxJbzRmcHZvMjRIUTNzU3JZbGhoMXN2ZTU5VDBYa09IK1BibHVmUUNKL2ZNQVpWZkVrSGtkZGVpSQpTSDNNamtrV1ZQRmpqeGtQU0g3T2xzeUkvTU9icGlLS1J3Wmc0OTBNU1YySjB3cVNiaXlnZjhKeHdMNVI4akJyCkhXUUhTck4wMnRwOFNaeTBwQmlaUEUvK2FlV2FIRTIxLzM0WVUyTVdKdjNibUNuU1FRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
  tls.key: 'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3QzdWtmWVNDaGgrVGwKemkwNnc2VndEM2Y2TDFEcE12YmhEUzc5TlMyMFZ3eE1BaGxSNHFnYjdDRktIdWp6SkdjYVpReE9NS0swYmp6egpjT2ZaV1JiQzBsS2pza3g0ZnVxN0NuSVhtSk9MU1lVK21PK2t1a0NFWXpoMmRJdDBONE1iMmdoSURjVXJlUnZyCjZoNEZxSWV4VDJjTFJKM0ZhTmJlVXNoRDErbGJmZHo2RDZpSUk1bjFTNWJjZmpmMnFpRGtCOGdVbk1JWU9IS2QKeGJmbmpqVDZGdWFNWXl6Q1RpSWZSQVAwS2VLbmVhS3lvMXV2ZUtaaGY3a2s1S09zTGVXai81am0weXJHQTNmYgpWdHAralhJT0VNQm5xTGdNMDBORm53WS9VWTJGQlZKeGxjbk9FVHczR3d5czcyQ21oSnczRkcxd3ZFZWk1d2x1CmZUVnZEakg5QWdNQkFBRUNnZ0VBR3RKQzhJZ0ZabDJtQWd4STNtS05iQWk2MTVHQ2dBTFFZajJzSkx2V0dkWisKeTEvY2c0ejlKVmVLK0JubUVoSG94TUhYUU4yUVQ5aWNsdW94SGM1NExDUVJRdmJQaEp3QmZrcDVlS25kQXRUYgoxT0QzUU5oSmVSS3NSRnVzb29nb3RieHY0QnVkc1p2Y1lvdHFSN0dzZ3YzdWRhYkhWc3RhTUJBaG5CT2J5RFRVClZtQVNOdC9kL0JSRjdZN09xT3JJa2VMZWI3NU1JaHJFbk1OQXRQZlEvV0pkbytnQmcvZ3kwUjBOWTFFdGlqZHEKSmNDejRqaXdVb1JLUjZVMDA1U3VKRk1vZ01pamlKSnI0d3VLRWVFVzZZTnh3ZFBrODg3ajRYYmxYRG1uYWw3SgpVVVl0RnhxZkROK0lxVU5CTWVMZFJDQko5cWZNZDJ4Q1BTZFoyYzNpb1FLQmdRRGZTRFZiNFRIUHJuMUd4ckZRCkJvUTRRU0VtRDAzZGxqOHIzVE1STzQ0eW1PWUNISVBoOUNhdzRTNS9CR3FvOENPZVJRcFh4QUdxQUVoVm5KWS8KeWlNMHVhSmV6NmhTQ0ZCRlZ2Ykg3dmpKQlNqdWJtbHpOZ1d5STFEQUg3WCtHcjFaZzV0Ukw0MW5DdlRXbk92LwpZZXpQZWJiRVg0YkpxZkthWTVLc2doQXdvUUtCZ1FESFdTMVZxVzRweEgzdGZEZEtqOXNleWliVjBIRkFZUFRMCmtuaVliREFTV2xIWGtxUmdRcExEUlpocVc2THJRaUpFeXVuVmFVNnlncEFOaSsxNGVBbDRVR3h2NjU5WWRkWkkKT2ExTzdLa2gxTW84dGtYUVc5Rk5zVHF5czVidmRIU2NSK2RVd3luUXFrN2dxYUc5TWp1aTIzSjEwck41QkRMTgo1c0tnakIzWDNRS0JnRlNHMTN4aThpSjNJZ0hyTWpEalpxYU5NV2xoSGM4bkU5OGRMRG4zMjhzWHl1czl0RWVUCjBCbmlCV0ljWCt4NGpHTmNLNkF5R1pjcjZEWlF3eWgrODNrQVZaR2k5MHVtemd5UjhYYWE1eC9pamk1RktqSnQKWHhhaSsremZsRndQNzJLMXlkU2dOZDJ1YmlYWTNoYWVFYkl4bDVrYnVNRWJUelpYUDYyQ3gzSkJBb0dCQUk1NQpMc3gxVGxXdHFHNnVBM3BYdkR5U01CVktaMWFpdFBJMW1ka2VJWEZNZWdlL041blFtc0hUSUs2TEZiSmNUcytwCjBsdURhd3BzQS9hYWxqc3VWMTVVNUZ0TkpGSjl6WXRMSlpFdDFXZG5oSzdGZXJvQ2xXR1lsQ0laOW5ybldWeEUKaTVIcDloMjdTcXFJc2g3ZEl3QXZKT3dPamRTazZvWjhNWWU2L0sxRkFvR0FIVG9Lc3FGT0pYbTFTdzBlV2dPWApMampOcmkyamRlMFBXV0hMb2hVZk8zYms5cFZhN1ZuY0h5bGtVbW9BdGJpL2F0cENrdmpTSk12ckh3ZnpiZFdSCkZZSDQwMzlCdzdQcUl3SVdvcUtJS2lYazNWYnBXcE9SMUduVXV6UzNuaDlOT1F6RnFTZlJTSjloM0J1NGNIQTkKL0FHSWxCOEwyNFNQVkxvUVh5YTdpbm89Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K'
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-agent
  labels:
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.getambassador.io/role-group: edge-stack-agent
rules: []
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-agent-pods
  labels:
    rbac.getambassador.io/role-group: edge-stack-agent
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
rules:
- apiGroups: ['']
  resources: [pods]
  verbs: [get, list, watch]
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-agent-deployments
  labels:
    rbac.getambassador.io/role-group: edge-stack-agent
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
rules:
- apiGroups: [apps, extensions]
  resources: [deployments]
  verbs: [get, list, watch]
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-agent-endpoints
  labels:
    rbac.getambassador.io/role-group: edge-stack-agent
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
rules:
- apiGroups: ['']
  resources: [endpoints]
  verbs: [get, list, watch]
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-agent-configmaps
  labels:
    rbac.getambassador.io/role-group: edge-stack-agent
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
rules:
- apiGroups: ['']
  resources: [configmaps]
  verbs: [get, list, watch]
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-agent-rollouts
  labels:
    rbac.getambassador.io/role-group: edge-stack-agent
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
rules:
- apiGroups: [argoproj.io]
  resources: [rollouts, rollouts/status]
  verbs: [get, list, watch, patch]
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-agent-applications
  labels:
    rbac.getambassador.io/role-group: edge-stack-agent
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
rules:
- apiGroups: [argoproj.io]
  resources: [applications]
  verbs: [get, list, watch]
---
# Source: edge-stack/charts/emissary-ingress/templates/rbac.yaml
######################################################################
# Aggregate                                                          #
######################################################################
# This ClusterRole has an empty `rules` and instead sets
# `aggregationRule` in order to aggregate several other ClusterRoles
# together, to avoid the need for multiple ClusterRoleBindings.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.getambassador.io/role-group: edge-stack
rules: []
---
# Source: edge-stack/charts/emissary-ingress/templates/rbac.yaml
######################################################################
# No namespace                                                       #
######################################################################
# These ClusterRoles should be limited to resource types that are
# non-namespaced, and therefore cannot be put in a Role, even if
# Emissary is in single-namespace mode.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-crd
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
    rbac.getambassador.io/role-group: edge-stack
rules:
- apiGroups: [apiextensions.k8s.io]
  resources: [customresourcedefinitions]
  verbs: [get, list, watch, delete]
---
# Source: edge-stack/charts/emissary-ingress/templates/rbac.yaml
######################################################################
# All namespaces                                                     #
######################################################################
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-watch
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
    rbac.getambassador.io/role-group: edge-stack
rules:
- apiGroups: ['']
  resources:
  - namespaces
  - services
  - secrets
  - configmaps
  - endpoints
  verbs: [get, list, watch]

- apiGroups: [getambassador.io, gateway.getambassador.io]
  resources: ['*']
  verbs: [get, list, watch, update, patch, create, delete]

- apiGroups: [getambassador.io]
  resources: [mappings/status]
  verbs: [update]

- apiGroups: [networking.internal.knative.dev]
  resources: [clusteringresses, ingresses]
  verbs: [get, list, watch]

- apiGroups: [networking.x-k8s.io]
  resources: ['*']
  verbs: [get, list, watch]

- apiGroups: [networking.internal.knative.dev]
  resources: [ingresses/status, clusteringresses/status]
  verbs: [update]

- apiGroups: [extensions, networking.k8s.io]
  resources: [ingresses, ingressclasses]
  verbs: [get, list, watch]

- apiGroups: [extensions, networking.k8s.io]
  resources: [ingresses/status]
  verbs: [update]
---
# Source: edge-stack/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edge-stack-aes
  labels:
    product: aes
    rbac.getambassador.io/role-group: edge-stack
rules:
- apiGroups: ['']
  resources: [secrets]
  verbs: [get, list, watch, create, update]

- apiGroups: ['']
  resources: [events]
  verbs: [get, list, watch, create, patch]

- apiGroups: [coordination.k8s.io]
  resources: [leases]
  verbs: [get, create, update]

- apiGroups: ['']
  resources: [endpoints]
  verbs: [get, list, watch, create, update]
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: edge-stack-agent
  labels:
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edge-stack-agent
subjects:
- kind: ServiceAccount
  name: edge-stack-agent
  namespace: ambassador
---
# Source: edge-stack/charts/emissary-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: edge-stack
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edge-stack
subjects:
- name: edge-stack
  namespace: ambassador
  kind: ServiceAccount
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: edge-stack-agent-config
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
rules:
- apiGroups: ['']
  resources: [configmaps]
  verbs: [get, list, watch]
- apiGroups: ['']
  resources: [secrets]
  verbs: [get, list, watch, create, delete, patch]
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: edge-stack-agent-config
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: edge-stack-agent-config
subjects:
- kind: ServiceAccount
  name: edge-stack-agent
  namespace: ambassador
---
# Source: edge-stack/charts/emissary-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: edge-stack-apiext
  namespace: emissary-system
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
    rbac.getambassador.io/role-group: edge-stack
rules:
- apiGroups: [apps]
  resources:
  - deployments
  verbs: [get, list, watch]
---
# Source: edge-stack/charts/emissary-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: edge-stack-apiext
  namespace: emissary-system
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: edge-stack-apiext
subjects:
- name: edge-stack
  namespace: ambassador
  kind: ServiceAccount
---
# Source: edge-stack/charts/emissary-ingress/templates/admin-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: edge-stack-admin
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    # Hard-coded label for Prometheus Operator ServiceMonitor
    service: ambassador-admin
    product: aes
  annotations:
    a8r.io/owner: Ambassador Labs
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: The Ambassador Edge Stack admin service for internal use and
      health checks.
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: None
spec:
  type: ClusterIP
  ports:
  - port: 8877
    targetPort: admin
    protocol: TCP
    name: ambassador-admin
  - port: 8005
    targetPort: 8005
    protocol: TCP
    name: ambassador-snapshot
  selector:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
---
# Source: edge-stack/charts/emissary-ingress/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: edge-stack
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    app.kubernetes.io/component: ambassador-service
    product: aes
  annotations:
    a8r.io/owner: Ambassador Labs
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: The Ambassador Edge Stack goes beyond traditional API Gateways
      and Ingress Controllers with the advanced edge features needed to support developer
      self-service and full-cycle development.
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: edge-stack-redis.ambassador
spec:
  type: NodePort          ## SERVICE CHANGED TO NODEPORT.
  ports:
  - name: http
    port: 80
    targetPort: 8080
    nodePort: 30080
  - name: https
    port: 443
    targetPort: 8443
    nodePort: 30443
  selector:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    profile: main
---
# Source: edge-stack/templates/aes-redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: edge-stack-redis
  namespace: ambassador
  labels:
    product: aes
  annotations:
    a8r.io/owner: Ambassador Labs
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: The Ambassador Edge Stack Redis store for auth and rate limiting,
      among other things.
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: None
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    service: ambassador-redis
---
# Source: edge-stack/charts/emissary-ingress/templates/ambassador-agent.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: edge-stack-agent
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack-agent
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: edge-stack-agent
      app.kubernetes.io/instance: edge-stack
  template:
    metadata:
      labels:
        app.kubernetes.io/name: edge-stack-agent
        app.kubernetes.io/instance: edge-stack
        app.kubernetes.io/part-of: edge-stack
        app.kubernetes.io/managed-by: getambassador.io
        product: aes
    spec:
      serviceAccountName: edge-stack-agent
      containers:
      - name: agent
        image: docker.io/ambassador/ambassador-agent:1.0.14
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: AGENT_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AGENT_CONFIG_RESOURCE_NAME
          value: edge-stack-agent-cloud-token
        - name: RPC_CONNECTION_ADDRESS
          value: https://app.getambassador.io/
        - name: AES_SNAPSHOT_URL
          value: http://edge-stack-admin.ambassador:8005/snapshot-external
        - name: AES_REPORT_DIAGNOSTICS_TO_CLOUD
          value: 'true'
        - name: AES_DIAGNOSTICS_URL
          value: http://edge-stack-admin.ambassador:8877/ambassador/v0/diag/?json=true
  progressDeadlineSeconds: 600
---
# Source: edge-stack/charts/emissary-ingress/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: edge-stack
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    product: aes
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: edge-stack
      app.kubernetes.io/instance: edge-stack
  strategy:
    type: RollingUpdate
  progressDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: edge-stack
        app.kubernetes.io/instance: edge-stack
        app.kubernetes.io/part-of: edge-stack
        app.kubernetes.io/managed-by: getambassador.io
        product: aes
        profile: main
      annotations:
        consul.hashicorp.com/connect-inject: 'false'
        sidecar.istio.io/inject: 'false'
    spec:
      terminationGracePeriodSeconds: 0
      securityContext:
        runAsUser: 8888
      restartPolicy: Always
      serviceAccountName: edge-stack
      volumes:
      - name: ambassador-pod-info
        downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
      initContainers:
      - name: wait-for-apiext
        image: istio/kubectl:1.5.10
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 8888
        command: [/bin/sh, -c]
        args:
        - |
          deployment_name="emissary-apiext"
          deployment_namespace="emissary-system"
          while true; do
            echo "checking if deployment/$deployment_name in namespace: $deployment_namespace exists."
            if kubectl get deployment "$deployment_name" -n $deployment_namespace > /dev/null 2>&1; then
              echo "$deployment_name.$deployment_namespace exists."
              echo "checking if $deployment_name.$deployment_namespace is fully available..."
              kubectl wait --for=condition=available deployment/"$deployment_name" -n $deployment_namespace --timeout=5m
              if [ $? -eq 0 ]; then
                echo "$deployment_name.$deployment_namespace is available"
                while true; do
                desired_replicas=$(kubectl get deployment $deployment_name -n $deployment_namespace -o jsonpath='{.spec.replicas}')
                current_replicas=$(kubectl get deployment $deployment_name -n $deployment_namespace -o jsonpath='{.status.replicas}')
                if [[ $current_replicas != $desired_replicas ]]; then
                  echo "$deployment_name.$deployment_namespace is in the process of restarting. Have: $current_replicas, want $desired_replicas"
                  sleep 3
                else
                  echo "$deployment_name.$deployment_namespace is fully ready and not currently restarting.  Have: $current_replicas, want $desired_replicas"
                  break
                fi
                done
                break
              else
                echo "$deployment_name.$deployment_namespace did not become available within the timeout"
              fi
            else
              echo "$deployment_name.$deployment_namespace does not exist yet. Waiting..."
              sleep 3
            fi
          done
      containers:
      - name: aes
        image: docker.io/datawire/aes:3.10.1
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        - name: admin
          containerPort: 8877
        env:
        - name: AMBASSADOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AGENT_CONFIG_RESOURCE_NAME
          value: edge-stack-agent-cloud-token
        - name: AMBASSADOR_DRAIN_TIME
          value: '600'
        - name: AMBASSADOR_INTERNAL_URL
          value: https://127.0.0.1:8443
        - name: POLL_EVERY_SECS
          value: '60'
        - name: REDIS_URL
          value: edge-stack-redis:6379
        securityContext:
          allowPrivilegeEscalation: false
        livenessProbe:
          httpGet:
            path: /ambassador/v0/check_alive
            port: admin
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ambassador/v0/check_ready
            port: admin
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 10
        volumeMounts:
        - name: ambassador-pod-info
          mountPath: /tmp/ambassador-pod-info
          readOnly: true
        resources:
          limits:
            cpu: 1000m
            memory: 600Mi
          requests:
            cpu: 200m
            memory: 300Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  service: ambassador
              topologyKey: kubernetes.io/hostname
            weight: 100
      imagePullSecrets: []
      dnsPolicy: ClusterFirst
      hostNetwork: false
---
# Source: edge-stack/templates/aes-redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: edge-stack-redis
  namespace: ambassador
  labels:
    product: aes
  annotations: {}
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ambassador-redis
  template:
    metadata:
      labels:
        service: ambassador-redis
    spec:
      containers:
      - name: redis
        image: redis:5.0.1
        imagePullPolicy: IfNotPresent
        resources: {}
      restartPolicy: Always
---
# Source: edge-stack/templates/aes-authservice.yaml
apiVersion: getambassador.io/v3alpha1
kind: AuthService
metadata:
  name: edge-stack-auth
  namespace: ambassador
  labels:
    product: aes
spec:
  proto: grpc
  protocol_version: v3
  auth_service: 127.0.0.1:8500
  allow_request_body: false
  status_on_error:
    code: 504
---
# Source: edge-stack/templates/aes-internal.yaml
# Configure DevPortal
apiVersion: getambassador.io/v3alpha1
kind: Mapping
metadata:
  # This Mapping name is referenced by convention, it's important to leave as-is.
  name: edge-stack-devportal
  namespace: ambassador
  labels:
    product: aes
spec:
  hostname: '*'
  prefix: /documentation/
  rewrite: /docs/
  service: 127.0.0.1:8500
---
# Source: edge-stack/templates/aes-internal.yaml
apiVersion: getambassador.io/v3alpha1
kind: Mapping
metadata:
  name: edge-stack-devportal-assets
  namespace: ambassador
  labels:
    product: aes
spec:
  hostname: '*'
  prefix: /documentation/(assets|styles)/(.*)(.css)
  prefix_regex: true
  regex_rewrite:
    pattern: /documentation/(.*)
    substitution: /docs/\1
  service: 127.0.0.1:8500
  add_response_headers:
    cache-control:
      value: public, max-age=3600, immutable
      append: false
---
# Source: edge-stack/templates/aes-internal.yaml
apiVersion: getambassador.io/v3alpha1
kind: Mapping
metadata:
  # This Mapping name is what the demo uses.
  name: edge-stack-devportal-demo
  namespace: ambassador
  labels:
    product: aes
spec:
  hostname: '*'
  prefix: /docs/
  rewrite: /docs/
  service: 127.0.0.1:8500
---
# Source: edge-stack/templates/aes-internal.yaml
apiVersion: getambassador.io/v3alpha1
kind: Mapping
metadata:
  # This Mapping name is referenced by convention, it's important to leave as-is.
  name: edge-stack-devportal-api
  namespace: ambassador
  labels:
    product: aes
spec:
  hostname: '*'
  prefix: /openapi/
  rewrite: ''
  service: 127.0.0.1:8500
---
# Source: edge-stack/templates/aes-ratelimit.yaml
apiVersion: getambassador.io/v3alpha1
kind: RateLimitService
metadata:
  name: edge-stack-ratelimit
  namespace: ambassador
  labels:
    product: aes
spec:
  service: 127.0.0.1:8500
  protocol_version: v3
---
# Source: edge-stack/charts/emissary-ingress/templates/module.yaml
apiVersion: getambassador.io/v3alpha1
kind: Module
metadata:
  name: ambassador
  namespace: ambassador
  labels:
    app.kubernetes.io/name: edge-stack
    app.kubernetes.io/instance: edge-stack
    app.kubernetes.io/part-of: edge-stack
    app.kubernetes.io/managed-by: getambassador.io
    app.kubernetes.io/component: edge-stack
    product: aes
spec:
  config:
    diagnostics:
      allow_non_local: true
      enabled: false
---
apiVersion: getambassador.io/v3alpha1
kind: Listener
metadata:
  name: ambassador-listener    ## LISTENER ADDED
  namespace: ambassador
spec:
  port: 8080
  protocol: HTTP
  securityModel: XFP
  hostBinding:
    namespace:
      from: ALL
---
apiVersion: getambassador.io/v3alpha1
kind: Host
metadata:
  name: ambassador-host     # HOST  ADDED
  namespace: ambassador
spec:
  hostname: "*"
  acmeProvider:
    authority: none
  tlsSecret:
    name: ambassador-tls
  requestPolicy:
    insecure:
      action: Route
---
apiVersion: getambassador.io/v3alpha1
kind: Mapping
metadata:
  name: argocd-server
  namespace: ambassador
spec:
  prefix: /
  rewrite: /
  service: argocd-server.argocd.svc.cluster.local:443
  host: argocd.example.com
  tls: true
